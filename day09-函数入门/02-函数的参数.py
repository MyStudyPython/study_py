"""
1.形参与实参
形式参数的含义指的是在函数中占位，在函数编程中能够占位，以便实际参数传递过来后能够有位置进行处理的参数
实参是实际传入参数的值

在执行参数时，传入参数时一般有两种模式：

位置传参
关键字传参

2.混合使用（位置 + 关键字）
位置参数在前面，关键字参数在后面！！！！


3. 默认参数
自我理解：
默认参数相当于 位置传参上加入关键字传参，必须对齐
位置参数在前面，关键字参数在后面！！！！

4. 动态参数

当前我们的参数都是有限个，那有些未知个数的参数如何编写

4.1 *(*args) 只能按照位置传参
4.2 **(**kwargs) 只能按关键值传参
4.3 *,** (*args,**kwargs)  既能通过关键字传参也能按照位置传参
4.4 混合使用


5. 参数的定义和使用顺序

定义顺序和使用顺序是相同的，默认按照

    普通参数(位置传参/关键字传参) -> 动态位置传参 -> 默认参数 -> 动态关键字传参

"""

"""
1.形参与实参
"""


# 定义有三个参数的函数（a1/a2/a3一般称为形式参数-形参）
def my_func(a1, a2, a3):
    result = a1 + a2 - a3
    return result


# 执行函数并传入参数（执行函数传值时一般称为实际参数-实参）
## 有几个形参，在调用时就要有几个实参
## 执行函数并传入参数
"位置传参"
res1 = my_func(1, 6, 8)  # -1

res2 = my_func(7, 8, 3)  # 12

"关键字传参"
res1 = my_func(a1=1, a3=6, a2=8)  # 3

res2 = my_func(a2=7, a3=8, a1=3)  # 2

"""
2.混合使用

位置参数在前面，关键字参数在后面！！！！
"""
res1 = my_func(1, a3=6, a2=8)  # 3
# res1 = my_func(1, 6, a2=8) #报错 因为a2被位置参数赋值了，就不能用关键字传参再传一次

res2 = my_func(2, a3=8, a2=3)  # -3
# res2 = my_func(2, a3=8, a1=3)  # 报错同理

"""
注意：
1. 函数要求你传入几个参数，你就要传入几个参数
2. 参数传参类型可以为： None、 bool、int、str、list、dist...
3. 混合使用的时候，相同的参数不能赋值两次，
    比如位置参数已占的位置，关键字传参就不能再次传入
"""

"""
练习题1：
定义函数，接受1个字符串类型的参数,函数内部计算字符串中的“a”出现的次数并输出。
"""


def str_func(str):
    count = 0
    for i in str:
        if i == "a":
            count += 1

    return count


res1 = str_func("sdadadayyjhjadanklkkkl")  # 5

"""
练习题2：
定义函数，接受两个参数：字符串--文本，字符串--关键词，计算某一个字符出现的次数
"""


def string_func(str, key):
    count = 0
    for i in str:
        if i == key:
            count += 1
    return count


res2 = string_func("sdadadayyjhjadanklkkkl", "a")  # 5


"""
3. 默认参数

自我理解：
默认参数相当于 位置传参上加入关键字传参，必须对齐
"""


def add(a, b, c, d=10):
    # print(a + b + c + d)
    pass


add(1, 2, 3)  # 1+2+3+10=16
add(1, 2, 3, 4)  # 1+2+3+4=10
add(1, 2, d=3, c=4)  # 1+2+4+3=10
"注意：这里和上面的混合一样，必须位置参数在前，关键字参数在后"

"""
4. 动态参数

当前我们的参数都是有限个，那有些未知个数的参数如何编写

4.1 *(*args) 只能按照位置传参
4.2 **(**kwargs) 只能按关键值传参
4.3 *,** (*args,**kwargs)  既能通过关键字传参也能按照位置传参
4.4 混合之前的使用
"""


"4.1 *(*args) 只能按照位置传参"


def func(*a1):
    # (1,)
    # (11, 22, 33)
    # (11, 22, 33, 'xxxx', ['7777', '8888'])
    # (11, 22, 33, 'xxxx', ['7777', '8888'], True, {'a': 6, 'b': 's'})

    # ([11, 22, 33],)
    "自动打包成元组"
    # print(a1)
    pass


# 只能通过位置传参的形式传入n个参数
func(1)
func(11, 22, 33)
func(11, 22, 33, "xxxx", ["7777", "8888"])
func(11, 22, 33, "xxxx", ["7777", "8888"], True, {"a": 6, "b": "s"})

func([11, 22, 33])

"4.2 **(**kwargs) 只能按关键值传参"


def func(**dt):
    # {'a1': 2, 'a3': 5, 'a4': 6, 'a2': '6'}
    # {'a1': 2, 'a3': 5, 'a4': 6}
    "自动打包成字典类型"
    # print(dt)
    pass


# 只能用关键字传参的形式传参
func(a1=2, a3=5, a4=6, a2="6")
func(a1=2, a3=5, a4=6)


"4.3 *,** (*args,**kwargs)  既能通过关键字传参也能按照位置传参"


def func(*x1, **dt):
    # (11, 22, 33) {'xx': 123, 'uu': 222, 'b564': 'b23'}
    # () {}
    # print(x1, dt)
    pass


func(11, 22, 33, xx=123, uu=222, b564="b23")
func()
"""
注意实现：
1.定义函数顺序
2.执行函数参数时，位置参数在前，关键字传参在后
3.当不传参时, () {} 为一个空元祖和空字典
4.只允许有一个 * 或者 **
"""

"4.4 混合使用"


def func(a1, a2, a3, *x1, **dt):
    # 1 22 33 (777, 8888, 9999) {'xxx': 23132, 'yyy': 3424, 'zdad': '8888'}
    # print(a1, a2, a3, x1, dt)
    pass


func(11, 22, 33, 777, 8888, 9999, xxx=23132, yyy=3424, zdad="8888")

"""
5. 参数的定义和使用顺序

定义顺序和使用顺序是相同的，默认按照

    普通参数(位置传参/关键字传参) -> 动态位置传参 -> 默认参数 -> 动态关键字传参
"""


def demo2(a1, a2, a3, a4=10, *args, a5=20, **kwargs):
    # 11 22 33 44 10 (55, 66, 77) {'a10': 123}
    # print(a1, a2, a3, a4, a5, args, kwargs)
    """
    11, 22, 33, 44 分别赋值给了 a1, a2, a3, a4
    55, 66, 77 赋值给了 args 形成 (55, 66, 77)
    a5=10 把10赋值给了 a5
    a10=123 把a10=123赋值给了 **kwargs 形成 {'a10': 123}
    """
    pass


demo2(11, 22, 33, 44, 55, 66, 77, a5=10, a10=123)
